{"version":3,"file":"././js//app.es5.js","mappings":"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","sources":["webpack://jamiedraws/../shared/ts/patterns/pubsub.ts","webpack://jamiedraws/../shared/ts/utils/capture-element.ts","webpack://jamiedraws/../shared/ts/utils/element-controller.ts","webpack://jamiedraws/webpack/bootstrap","webpack://jamiedraws/webpack/runtime/define property getters","webpack://jamiedraws/webpack/runtime/hasOwnProperty shorthand","webpack://jamiedraws/./js/app.ts"],"sourcesContent":["import {\r\n    IPubSubEvents,\r\n    IPubSubEventTask,\r\n    PubSubTask\r\n} from \"Shared/ts/interfaces/patterns/pubsub\";\r\n\r\nexport default class PubSub {\r\n    /**\r\n     * Represents the relationship between the PubSub instance and the id that is used to generate unique tokens\r\n     */\r\n    private static id: WeakMap<PubSub, number> = new WeakMap();\r\n\r\n    /**\r\n     * Represents the relationship between the PubSub instance and the IPubSubEvents object\r\n     */\r\n    private static events: WeakMap<PubSub, IPubSubEvents> = new WeakMap();\r\n\r\n    /**\r\n     * A publish/subscribe, pub-sub, interface that enables the ability to subscribe multiple different tasks to a common event name, the ability to publish different data to all subscribers of the common event name, and the ability to unsubscribe from a common event name.\r\n     */\r\n    constructor() {\r\n        PubSub.id.set(this, -1);\r\n        PubSub.events.set(this, {});\r\n    }\r\n\r\n    /**\r\n     * Takes the event name along with any data and publishes the data to all of the subscribers. Returns true if the publish operation was successful; otherwise, returns false.\r\n     * @param event string\r\n     * @param record MutationRecord\r\n     * @returns boolean\r\n     */\r\n    public publish(event: string, data: any): boolean {\r\n        const events = PubSub.events.get(this);\r\n\r\n        if (!events) {\r\n            return false;\r\n        }\r\n\r\n        if (!events[event]) {\r\n            return false;\r\n        }\r\n\r\n        const subscribers = events[event];\r\n\r\n        subscribers.forEach(function (subscriber: IPubSubEventTask) {\r\n            subscriber.task(data);\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Uses an event name and a callback function to make a subscription. In turn, calling the publish method on this event name will execute the callback function. A unique token is returned that can be used to unsubscribe from the system.\r\n     * @param event string\r\n     * @param task PubSubTask\r\n     * @returns string\r\n     */\r\n    public subscribe(event: string, task: PubSubTask): string {\r\n        let token = \"\";\r\n        let id = PubSub.id.get(this);\r\n\r\n        const events = PubSub.events.get(this);\r\n\r\n        if (events && id !== undefined) {\r\n            if (!events[event]) {\r\n                events[event] = [];\r\n            }\r\n\r\n            if (id !== undefined) {\r\n                PubSub.id.set(this, (id += 1));\r\n\r\n                token = id.toString();\r\n\r\n                events[event].push({\r\n                    token: token,\r\n                    task: task\r\n                });\r\n            }\r\n        }\r\n\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Uses a unique token to unsubscribe a callback function from an event name. The token is returned if the unsubscription operation is successful; otherwise, null is returned.\r\n     * @param token string\r\n     * @returns string\r\n     */\r\n    public unsubscribe(token: string): string | undefined {\r\n        let found = false;\r\n\r\n        const events = PubSub.events.get(this);\r\n\r\n        if (events) {\r\n            found = Object.keys(events).some((event: string) => {\r\n                return events[event].some(\r\n                    (subscriber: IPubSubEventTask, index: number) => {\r\n                        const areEqual = subscriber.token === token.toString();\r\n\r\n                        if (areEqual) {\r\n                            events[event].splice(index, 1);\r\n                        }\r\n\r\n                        return areEqual;\r\n                    }\r\n                );\r\n            });\r\n        }\r\n\r\n        return found ? token : undefined;\r\n    }\r\n}\r\n","import {\r\n    CaptureElementEventName,\r\n    CaptureElementTask\r\n} from \"Shared/ts/interfaces/capture-element\";\r\nimport PubSub from \"Shared/ts/patterns/pubsub\";\r\n\r\nexport default class CaptureElement {\r\n    /**\r\n     * Represents the element that will be registered to a new MutationObserver instance\r\n     */\r\n    public element: Element;\r\n\r\n    /**\r\n     * Represents the relationship between the CaptureElement instance and the MutationObserver instance\r\n     */\r\n    private static observers: WeakMap<CaptureElement, MutationObserver> =\r\n        new WeakMap();\r\n\r\n    /**\r\n     * Represents the relationship between the CaptureElement instance and the PubSub instance\r\n     */\r\n    private static pubsub: WeakMap<CaptureElement, PubSub> = new WeakMap();\r\n\r\n    /**\r\n     * CaptureElement is a publish/subscribe, pub-sub, interface that can be controlled by an element that is registered to a new MutationObserver instance. Subscription names are mapped to the Mutation Observer's observable types that are defined in the MutationObserverInit dictionary. When an observable type is captured on the element, a callback function will be executed back to the author where the MutationRecord information can be accessed.\r\n     * @param element Element\r\n     */\r\n    constructor(element: Element) {\r\n        this.element = element;\r\n\r\n        const pubsub = new PubSub();\r\n        const observer = CaptureElement.createObserver(element, (records) => {\r\n            records.forEach((record) => {\r\n                switch (record.type) {\r\n                    case \"characterData\":\r\n                        pubsub.publish(\"characterData\", record);\r\n                        break;\r\n                    case \"attributes\":\r\n                        pubsub.publish(\"attributes\", record);\r\n                        break;\r\n                    case \"childList\":\r\n                        pubsub.publish(\"childList\", record);\r\n                        break;\r\n                }\r\n            });\r\n        });\r\n\r\n        CaptureElement.pubsub.set(this, pubsub);\r\n        CaptureElement.observers.set(this, observer);\r\n    }\r\n\r\n    /**\r\n     * Takes the element along with the callback function and returns the new MutationObserver object\r\n     * @param element Element\r\n     * @param callback MutationCallback\r\n     * @returns MutationObserver\r\n     */\r\n    private static createObserver(\r\n        element: Element,\r\n        callback: MutationCallback\r\n    ): MutationObserver {\r\n        const observer = new MutationObserver(callback);\r\n\r\n        observer.observe(element, {\r\n            subtree: true,\r\n            childList: true,\r\n            attributes: true,\r\n            characterData: true\r\n        });\r\n\r\n        return observer;\r\n    }\r\n\r\n    /**\r\n     * Uses an event name and a callback function to make a subscription. In turn, calling the publish method on this event name will execute the callback function. A unique token is returned that can be used to unsubscribe from the system.\r\n     * @param event CaputerElementEventName\r\n     * @param task CaptureElementTask\r\n     * @returns string\r\n     */\r\n    public subscribe(\r\n        event: CaptureElementEventName,\r\n        task: CaptureElementTask\r\n    ): string | undefined {\r\n        const pubsub = CaptureElement.pubsub.get(this);\r\n\r\n        return pubsub?.subscribe(event, task);\r\n    }\r\n\r\n    /**\r\n     * Uses a unique token to unsubscribe a callback function from an event name. The token is returned if the unsubscription operation is successful; otherwise, null is returned.\r\n     * @param token string\r\n     * @returns string\r\n     */\r\n    public unsubscribe(token: string): string | undefined {\r\n        const pubsub = CaptureElement.pubsub.get(this);\r\n\r\n        return pubsub?.unsubscribe(token);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection to the element's MutationObserver\r\n     */\r\n    public disconnect(): void {\r\n        const observer = CaptureElement.observers.get(this);\r\n\r\n        observer?.disconnect();\r\n    }\r\n\r\n    /**\r\n     * Opens the connection to the element's MutationObserver\r\n     */\r\n    public connect(): void {\r\n        const observer = CaptureElement.observers.get(this);\r\n\r\n        observer?.observe(this.element, {\r\n            subtree: true,\r\n            childList: true,\r\n            attributes: true,\r\n            characterData: true\r\n        });\r\n    }\r\n}\r\n","import CaptureElement from \"Shared/ts/utils/capture-element\";\r\n\r\nexport default class ElementController {\r\n    /**\r\n     * Represents the root that will contain all elements and controllers as descedent elements\r\n     */\r\n    public root: Element | null | undefined;\r\n\r\n    /**\r\n     * Represents an array of controller elements where each controller is responsible for managing the state of the elements through the `aria-controls` attribute\r\n     */\r\n    public controllers: Element[] = [];\r\n\r\n    /**\r\n     * Represents an array of elements where each element can be controlled by a controller element through the `id` attribute\r\n     */\r\n    public elements: (Element | undefined | null)[];\r\n\r\n    /**\r\n     * Enables the ability for controller elements that are equipped with the `aria-controls` attribute to control the state of other elements by a reference to it's `id` attribute.\r\n     * @param root Element | null | undefined\r\n     */\r\n    constructor(root?: Element | null | undefined) {\r\n        this.root = root ?? document.querySelector(\".element-controller\");\r\n\r\n        if (!this.root?.classList.contains(\"element-controller\")) {\r\n            this.root?.classList.add(\"element-controller\");\r\n        }\r\n\r\n        if (this.root) {\r\n            this.controllers = Array.from(\r\n                this.root.querySelectorAll(\"[aria-controls]\")\r\n            ).filter(\r\n                (controller) =>\r\n                    controller.closest(\".element-controller\") === this.root\r\n            );\r\n        }\r\n\r\n        this.elements = [];\r\n\r\n        ElementController.initialize(this);\r\n    }\r\n\r\n    /**\r\n     * Initializes the process\r\n     * @param context ElementController\r\n     */\r\n    private static initialize(context: ElementController): void {\r\n        this.setElementsByContext(context);\r\n\r\n        if (context.root) {\r\n            const captureElement = new CaptureElement(context.root);\r\n\r\n            captureElement.subscribe(\"attributes\", (record) => {\r\n                if (record.attributeName === \"aria-controls\") {\r\n                    this.setElementsByContext(context);\r\n                }\r\n\r\n                const controller = context.controllers.find(\r\n                    (controller) => controller === record.target\r\n                );\r\n                if (!controller) return;\r\n\r\n                if (\r\n                    record.attributeName ===\r\n                    ElementController.getControllerExpandedAttribute(controller)\r\n                ) {\r\n                    context.initializeController(context, controller);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.initializeControllers(context);\r\n    }\r\n\r\n    /**\r\n     * Initializes all controllers\r\n     * @param context ElementController\r\n     */\r\n    protected static initializeControllers(context: ElementController): void {\r\n        context.controllers.forEach((controller) => {\r\n            context.initializeController(context, controller);\r\n\r\n            context.isControllerExpanded(controller)\r\n                ? context.addControllerState(controller)\r\n                : context.removeControllerState(controller);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes a controller\r\n     * @param context ElementController\r\n     * @param controller Element\r\n     */\r\n    protected initializeController(\r\n        context: ElementController,\r\n        controller: Element\r\n    ): void {\r\n        const relatedElements =\r\n            context.getRelatedElementsByController(controller);\r\n        const unrelatedElements =\r\n            context.getUnrelatedElementsByController(controller);\r\n\r\n        const isExpanded = context.isControllerExpanded(controller);\r\n\r\n        if (isExpanded) {\r\n            ElementController.updateControllerStatesByContext(\r\n                context,\r\n                controller\r\n            );\r\n            ElementController.addElementStateByElements(\r\n                relatedElements,\r\n                controller\r\n            );\r\n\r\n            ElementController.removeElementStateByElements(unrelatedElements);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterates through an array of elements and assigns the controller `id` as a value to the `data-element-controller-name` attribute, then sets the `aria-hidden` attribute to `false`\r\n     * @param elements (Element | undefined | null)[]\r\n     * @param controller Element\r\n     */\r\n    protected static addElementStateByElements(\r\n        elements: (Element | undefined | null)[],\r\n        controller: Element\r\n    ): void {\r\n        elements.forEach((element) => {\r\n            element?.setAttribute(\r\n                \"data-element-controller-name\",\r\n                controller.id\r\n            );\r\n            element?.setAttribute(\"aria-hidden\", \"false\");\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Takes the controller and sets the `aria-expanded` attribute to `true`\r\n     * @param controller Element\r\n     */\r\n    public addControllerState(controller: Element): void {\r\n        controller.setAttribute(\r\n            ElementController.getControllerExpandedAttribute(controller),\r\n            \"true\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Takes the controller and sets the `aria-expanded` attribute to `false`\r\n     * @param controller Element\r\n     */\r\n    public removeControllerState(controller: Element): void {\r\n        controller.setAttribute(\r\n            ElementController.getControllerExpandedAttribute(controller),\r\n            \"false\"\r\n        );\r\n    }\r\n\r\n    private static getControllerExpandedAttribute(controller: Element): string {\r\n        return ElementController.isControllerRoleCheckboxOrRadio(controller)\r\n            ? \"aria-checked\"\r\n            : \"aria-expanded\";\r\n    }\r\n\r\n    private static isControllerRoleCheckboxOrRadio(\r\n        controller: Element\r\n    ): boolean {\r\n        const isInput = controller.nodeName.toLowerCase() === \"input\";\r\n        const type = (controller.getAttribute(\"type\") ?? \"\").toLowerCase();\r\n\r\n        return isInput && (type === \"checkbox\" || type === \"radio\");\r\n    }\r\n\r\n    /**\r\n     * Iterates through an array of elements and removes the `data-element-controller-name` attribute and sets the `aria-hidden` attribute to `true`\r\n     * @param elements (Element | undefined | null)[]\r\n     */\r\n    protected static removeElementStateByElements(\r\n        elements: (Element | undefined | null)[]\r\n    ): void {\r\n        elements.forEach((element) => {\r\n            element?.removeAttribute(\"data-element-controller-name\");\r\n            element?.setAttribute(\"aria-hidden\", \"true\");\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Iterates through all controllers and attempts to capture and store all matching elements that can be controlled\r\n     * @param context ElementController\r\n     */\r\n    private static setElementsByContext(context: ElementController) {\r\n        context.controllers.forEach((controller) => {\r\n            const elements = this.getContainersByControllerIds(\r\n                context.getIdsByController(controller),\r\n                controller,\r\n                context\r\n            );\r\n\r\n            elements.forEach((element) => {\r\n                if (!context.elements.includes(element)) {\r\n                    context.elements.push(element);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Iterates through an array of id values and attempts to capture the DOM element by that id and returns each element into a new element array. If an element cannot be found in the document, an error message will be reported to the browser console informing the developer of a mismatch.\r\n     * @param ids string[]\r\n     * @param controller Element\r\n     * @param context ElementController\r\n     * @returns Element[]\r\n     */\r\n    private static getContainersByControllerIds(\r\n        ids: string[],\r\n        controller: Element,\r\n        context: ElementController\r\n    ): (Element | undefined | null)[] {\r\n        const filterIds = ids.filter((id) => id !== \"\");\r\n\r\n        return Array.from(filterIds, (id) => {\r\n            const element =\r\n                context.getElementById(id) ??\r\n                context.root?.querySelector(`#${id}`);\r\n\r\n            if (!element) {\r\n                console.error({\r\n                    message: `The element id, ${id}, referenced within the current controller could not be found in the document.`,\r\n                    controller\r\n                });\r\n            }\r\n\r\n            return element;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Filters out all controllers from the controller context and sets the `aria-expanded` state to `false`.\r\n     * @param context ElementController\r\n     * @param controllerContext Element\r\n     */\r\n    protected static updateControllerStatesByContext(\r\n        context: ElementController,\r\n        controllerContext: Element\r\n    ): void {\r\n        context.controllers\r\n            .filter((controller) => controller !== controllerContext)\r\n            .forEach((controller) =>\r\n                controller.setAttribute(\r\n                    this.getControllerExpandedAttribute(controller),\r\n                    \"false\"\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Determines if the controller is expanded through the `aria-expanded` attribute\r\n     * @param controller Element\r\n     * @returns boolean\r\n     */\r\n    public isControllerExpanded(controller: Element): boolean {\r\n        return (\r\n            controller.getAttribute(\r\n                ElementController.getControllerExpandedAttribute(controller)\r\n            ) === \"true\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns a new array of elements that are related to the id list referenced by the controller\r\n     * @param controller Element\r\n     * @returns (Element | undefined | null)[]\r\n     */\r\n    public getRelatedElementsByController(\r\n        controller: Element\r\n    ): (Element | undefined | null)[] {\r\n        const ids = this.getIdsByController(controller);\r\n\r\n        return this.elements.filter((element) =>\r\n            ids.includes(element?.id ?? \"\")\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns a new array of elements that aren't related to the id list referenced by the controller\r\n     * @param controller Element\r\n     * @returns (Element | undefined | null)[]\r\n     */\r\n    public getUnrelatedElementsByController(\r\n        controller: Element\r\n    ): (Element | undefined | null)[] {\r\n        const ids = this.getIdsByController(controller);\r\n\r\n        return this.elements.filter(\r\n            (element) => !ids.includes(element?.id ?? \"\")\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Takes a controller element and returns a string array of all id references\r\n     * @param controller Element\r\n     * @returns string[]\r\n     */\r\n    public getIdsByController(controller: Element): string[] {\r\n        return (controller.getAttribute(\"aria-controls\") ?? \"\").split(\" \");\r\n    }\r\n\r\n    /**\r\n     * Returns a matching element from the elements array by a given id\r\n     * @param id string\r\n     * @returns Element\r\n     */\r\n    public getElementById(id: string): Element | undefined | null {\r\n        return this.elements.find((element) => element?.id === id);\r\n    }\r\n\r\n    /**\r\n     * Takes a controller element, adds the controller state and updates the elements on the view\r\n     * @param controller Element\r\n     */\r\n    public toggleElementsByController(controller: Element): void {\r\n        this.addControllerState(controller);\r\n    }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// utils\nimport ElementController from \"Shared/ts/utils/element-controller\";\nconst elementController = new ElementController();\nelementController.controllers.forEach(controller => {\n  controller.addEventListener(\"click\", event => {\n    elementController.toggleElementsByController(controller);\n  });\n});"],"names":["PubSub","constructor","id","set","events","publish","event","data","get","subscribers","forEach","subscriber","task","subscribe","token","undefined","toString","push","unsubscribe","found","Object","keys","some","index","areEqual","splice","WeakMap","CaptureElement","element","pubsub","observer","createObserver","records","record","type","observers","callback","MutationObserver","observe","subtree","childList","attributes","characterData","disconnect","connect","ElementController","root","controllers","elements","document","querySelector","classList","contains","add","Array","from","querySelectorAll","filter","controller","closest","initialize","context","setElementsByContext","captureElement","attributeName","find","target","getControllerExpandedAttribute","initializeController","initializeControllers","isControllerExpanded","addControllerState","removeControllerState","relatedElements","getRelatedElementsByController","unrelatedElements","getUnrelatedElementsByController","isExpanded","updateControllerStatesByContext","addElementStateByElements","removeElementStateByElements","setAttribute","isControllerRoleCheckboxOrRadio","isInput","nodeName","toLowerCase","getAttribute","removeAttribute","getContainersByControllerIds","getIdsByController","includes","ids","filterIds","getElementById","console","error","message","controllerContext","split","toggleElementsByController"],"sourceRoot":""}